#!/usr/bin/env python
# -*- encoding: utf-8 -*-
import inspect
import json
import logging

class RespRet(object):
    def __init__(self, resp):
        self.origin_resp = resp

    @property
    def status_code(self):
        return self.origin_resp.status_code

    @property
    def reason(self):
        return self.origin_resp.reason

    @property
    def resp_json(self):
        return self._get_json()

    @property
    def json(self):
        return self.resp_json

    def _get_json(self):
        try:
            if (
                "Content-Type" in self.origin_resp.headers
                and "application/json" in self.origin_resp.headers["Content-Type"]
            ):
                return self.origin_resp.json()
            else:
                return json.loads(self.origin_resp.text)
        except Exception as e:
            logging.error("resp.json fail.")
            # raise

    def json_get(self, _path, unescape=False, escape=False):
        """ 获取指定路径的数据"""
        name_list = _path.split(".")
        target = self.json
        for name in name_list[:-1]:
            if name.isdigit():
                target = target[int(name)]
            else:
                target = target[name]
        if name_list[-1].isdigit():
            res = target[int(name_list[-1])]
        else:
            res = target[name_list[-1]]

        if unescape:
            res = json.loads(res)
        if escape:
            res = json.dumps(res)
        return res

    def has_attr(self, _path):
        """ 判断是否有某个属性"""
        flag = True
        try:
            self.json_get(_path)
        except:
            flag = False
        return flag


class NebulaRet(RespRet):
    """ 支持 常用的返回信息"""

    def __init__(self, resp):
        super(NebulaRet, self).__init__(resp)
        resp_json = self.resp_json
        if resp_json:
            self._error_code = (
                resp_json["error_code"] if "error_code" in resp_json else 0
            )
            self._error_msg = resp_json["error_msg"] if "error_msg" in resp_json else ""
            self._request_id = (
                resp_json["request_id"] if "request_id" in resp_json else ""
            )
            self._error = resp_json["error"] if "error" in resp_json else ""
        else:
            self._error_code = -1
            self._error_msg = "响应结果json解析失败"
            self._request_id = ""
            self._error = "响应结果json解析失败"

    @property
    def error_code(self):
        return self._error_code

    @property
    def error_msg(self):
        return self._error_msg

    @property
    def request_id(self):
        return self._request_id

    @property
    def error(self):
        return self._error



class $$%%CLASS_NAME%%$$System():
    def __init__(self, ip="", user="", pwd="", cfg=None, timeout=None):
        pass

    def log_resp_info(self, resp, title_msg=""):
        calframe = inspect.getouterframes(inspect.currentframe(), 2)
        title_msg = "[%s]%s" % (calframe[1][3], title_msg)
        if resp.status_code == 200:
            if "code" in resp and resp["code"] != 0:
                title_msg = "%s failed!" % title_msg
            else:
                title_msg = "%s success!" % title_msg
        else:
            title_msg = "%s failed!" % title_msg
        logging.info(title_msg)
$$%%API_FUNCTION%%$$



